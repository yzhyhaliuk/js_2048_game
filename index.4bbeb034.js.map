{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState || this.createEmptyBoard();\n        this.status = \"idle\";\n        this.score = 0;\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n    }\n    moveLeft() {\n        let moved = false;\n        this.board = this.board.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                filteredRow[i] *= 2;\n                this.score += filteredRow[i];\n                filteredRow.splice(i + 1, 1);\n                moved = true;\n            }\n            while(filteredRow.length < 4)filteredRow.push(0);\n            if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n            return filteredRow;\n        });\n        if (moved) this.addRandomTile();\n        this.checkGameWin();\n        this.checkGameOver();\n        return moved;\n    }\n    moveRight() {\n        let moved = false;\n        this.board = this.board.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            for(let i = filteredRow.length - 1; i > 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                filteredRow[i] *= 2;\n                this.score += filteredRow[i];\n                filteredRow.splice(i - 1, 1);\n                moved = true;\n            }\n            while(filteredRow.length < 4)filteredRow.unshift(0);\n            if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n            return filteredRow;\n        });\n        if (moved) this.addRandomTile();\n        this.checkGameWin();\n        this.checkGameOver();\n        return moved;\n    }\n    moveUp() {\n        let moved = false;\n        const transposedBoard = this.transpose(this.board);\n        const updatedBoard = transposedBoard.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                filteredRow[i] *= 2;\n                this.score += filteredRow[i];\n                filteredRow.splice(i + 1, 1);\n                moved = true;\n            }\n            while(filteredRow.length < 4)filteredRow.push(0);\n            if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n            return filteredRow;\n        });\n        this.board = this.transpose(updatedBoard);\n        if (moved) this.addRandomTile();\n        this.checkGameWin();\n        this.checkGameOver();\n        return moved;\n    }\n    moveDown() {\n        let moved = false;\n        let transposed = this.transpose(this.board);\n        transposed = transposed.map((row)=>{\n            const reversedRow = row.reverse();\n            const filteredRow = reversedRow.filter((cell)=>cell !== 0);\n            for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                filteredRow[i] *= 2;\n                this.score += filteredRow[i];\n                filteredRow.splice(i + 1, 1);\n                moved = true;\n            }\n            while(filteredRow.length < 4)filteredRow.push(0);\n            if (JSON.stringify(filteredRow) !== JSON.stringify(reversedRow)) moved = true;\n            return filteredRow.reverse();\n        });\n        this.board = this.transpose(transposed);\n        if (moved) this.addRandomTile();\n        this.checkGameWin();\n        this.checkGameOver();\n        return moved;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = this.createEmptyBoard();\n        this.addRandomTile();\n        this.addRandomTile();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameOver() {\n        if (this.board.some((row)=>row.includes(0))) return;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const current = this.board[i][j];\n            if (i > 0 && current === this.board[i - 1][j] || j > 0 && current === this.board[i][j - 1]) return;\n        }\n        this.status = \"lose\";\n    }\n    checkGameWin() {\n        for (const row of this.board)if (row.includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$field = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const cells = $09e991522ca7e64e$var$field.querySelectorAll(\".field-cell\");\n    let cellIndex = 0;\n    board.forEach((row)=>{\n        row.forEach((cell)=>{\n            const currentCell = cells[cellIndex];\n            currentCell.textContent = cell === 0 ? \"\" : cell;\n            currentCell.className = \"field-cell\";\n            if (cell > 0) currentCell.classList.add(`field-cell--${cell}`);\n            cellIndex++;\n        });\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const winMessage = document.querySelector(\".message-win\");\n    const loseMessage = document.querySelector(\".message-lose\");\n    const startMessage = document.querySelector(\".message-start\");\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    startMessage.classList.add(\"hidden\");\n    if (gameStatus === \"win\") winMessage.classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") loseMessage.classList.remove(\"hidden\");\n    else if (gameStatus === \"idle\") startMessage.classList.remove(\"hidden\");\n}\ndocument.querySelector(\".start\").addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"idle\") $09e991522ca7e64e$var$game.restart();\n    else $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    let moved = false;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowLeft\":\n            moved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    if (moved) {\n        $09e991522ca7e64e$var$renderBoard();\n        const button = document.querySelector(\".start\");\n        if (!button.classList.contains(\"restart\")) {\n            button.classList.remove(\"start\");\n            button.classList.add(\"restart\");\n            button.textContent = \"Restart\";\n        }\n    }\n});\n\n\n//# sourceMappingURL=index.4bbeb034.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst field = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction renderBoard() {\n  const board = game.getState();\n  const cells = field.querySelectorAll('.field-cell');\n  let cellIndex = 0;\n\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      const currentCell = cells[cellIndex];\n\n      currentCell.textContent = cell === 0 ? '' : cell;\n      currentCell.className = 'field-cell';\n\n      if (cell > 0) {\n        currentCell.classList.add(`field-cell--${cell}`);\n      }\n      cellIndex++;\n    });\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.add('hidden');\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  } else if (gameStatus === 'idle') {\n    startMessage.classList.remove('hidden');\n  }\n}\n\ndocument.querySelector('.start').addEventListener('click', () => {\n  if (game.getStatus() !== 'idle') {\n    game.restart();\n  } else {\n    game.start();\n  }\n  renderBoard();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  let moved = false;\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n\n    default:\n      break;\n  }\n\n  if (moved) {\n    renderBoard();\n\n    const button = document.querySelector('.start');\n\n    if (!button.classList.contains('restart')) {\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.textContent = 'Restart';\n    }\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || this.createEmptyBoard();\n    this.status = 'idle';\n    this.score = 0;\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    this.board = this.board.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveRight() {\n    let moved = false;\n\n    this.board = this.board.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameWin();\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveUp() {\n    let moved = false;\n    const transposedBoard = this.transpose(this.board);\n\n    const updatedBoard = transposedBoard.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    this.board = this.transpose(updatedBoard);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveDown() {\n    let moved = false;\n\n    let transposed = this.transpose(this.board);\n\n    transposed = transposed.map((row) => {\n      const reversedRow = row.reverse();\n      const filteredRow = reversedRow.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(reversedRow)) {\n        moved = true;\n      }\n\n      return filteredRow.reverse();\n    });\n\n    this.board = this.transpose(transposed);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = this.createEmptyBoard();\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(0))) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.board[i][j];\n\n        if (\n          (i > 0 && current === this.board[i - 1][j]) ||\n          (j > 0 && current === this.board[i][j - 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  checkGameWin() {\n    for (const row of this.board) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","createEmptyBoard","status","score","console","log","moveLeft","moved","map","row","filteredRow","filter","cell","i","length","splice","push","JSON","stringify","addRandomTile","checkGameWin","checkGameOver","moveRight","unshift","moveUp","updatedBoard","transposedBoard","transpose","moveDown","transposed","reversedRow","reverse","getScore","getState","getStatus","start","restart","Array","from","fill","emptyCells","col","randomIndex","Math","floor","random","some","includes","j","current","matrix","_","colIndex","$09e991522ca7e64e$var$field","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$renderBoard","cells","querySelectorAll","cellIndex","forEach","currentCell","textContent","className","classList","add","gameStatus","winMessage","loseMessage","startMessage","remove","addEventListener","e","preventDefault","key","button","contains"],"version":3,"file":"index.4bbeb034.js.map"}