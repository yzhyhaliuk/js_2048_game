{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || this.createEmptyBoard();\n        this.status = \"idle\";\n        this.score = 0;\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var moved = false;\n                this.board = this.board.map(function(row) {\n                    var filteredRow = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                        filteredRow[i] *= 2;\n                        _this.score += filteredRow[i];\n                        filteredRow.splice(i + 1, 1);\n                        moved = true;\n                    }\n                    while(filteredRow.length < 4)filteredRow.push(0);\n                    if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n                    return filteredRow;\n                });\n                if (moved) this.addRandomTile();\n                this.checkGameWin();\n                this.checkGameOver();\n                return moved;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var moved = false;\n                this.board = this.board.map(function(row) {\n                    var filteredRow = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = filteredRow.length - 1; i > 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                        filteredRow[i] *= 2;\n                        _this.score += filteredRow[i];\n                        filteredRow.splice(i - 1, 1);\n                        moved = true;\n                    }\n                    while(filteredRow.length < 4)filteredRow.unshift(0);\n                    if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n                    return filteredRow;\n                });\n                if (moved) this.addRandomTile();\n                this.checkGameWin();\n                this.checkGameOver();\n                return moved;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var moved = false;\n                var transposedBoard = this.transpose(this.board);\n                var updatedBoard = transposedBoard.map(function(row) {\n                    var filteredRow = row.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                        filteredRow[i] *= 2;\n                        _this.score += filteredRow[i];\n                        filteredRow.splice(i + 1, 1);\n                        moved = true;\n                    }\n                    while(filteredRow.length < 4)filteredRow.push(0);\n                    if (JSON.stringify(filteredRow) !== JSON.stringify(row)) moved = true;\n                    return filteredRow;\n                });\n                this.board = this.transpose(updatedBoard);\n                if (moved) this.addRandomTile();\n                this.checkGameWin();\n                this.checkGameOver();\n                return moved;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var moved = false;\n                var transposed = this.transpose(this.board);\n                transposed = transposed.map(function(row) {\n                    var reversedRow = row.reverse();\n                    var filteredRow = reversedRow.filter(function(cell) {\n                        return cell !== 0;\n                    });\n                    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                        filteredRow[i] *= 2;\n                        _this.score += filteredRow[i];\n                        filteredRow.splice(i + 1, 1);\n                        moved = true;\n                    }\n                    while(filteredRow.length < 4)filteredRow.push(0);\n                    if (JSON.stringify(filteredRow) !== JSON.stringify(reversedRow)) moved = true;\n                    return filteredRow.reverse();\n                });\n                this.board = this.transpose(transposed);\n                if (moved) this.addRandomTile();\n                this.checkGameWin();\n                this.checkGameOver();\n                return moved;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.board = this.createEmptyBoard();\n                this.addRandomTile();\n                this.addRandomTile();\n                this.status = \"playing\";\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        },\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                return Array.from({\n                    length: 4\n                }, function() {\n                    return Array(4).fill(0);\n                });\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (this.board.some(function(row) {\n                    return row.includes(0);\n                })) return;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var current = this.board[i][j];\n                    if (i > 0 && current === this.board[i - 1][j] || j > 0 && current === this.board[i][j - 1]) return;\n                }\n                this.status = \"lose\";\n            }\n        },\n        {\n            key: \"checkGameWin\",\n            value: function checkGameWin() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.includes(2048)) {\n                            this.status = \"win\";\n                            return;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"transpose\",\n            value: function transpose(matrix) {\n                return matrix[0].map(function(_, colIndex) {\n                    return matrix.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$field = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$scoreElement = document.querySelector(\".game-score\");\nfunction $197cd56b15c33885$var$renderBoard() {\n    var board = $197cd56b15c33885$var$game.getState();\n    var cells = $197cd56b15c33885$var$field.querySelectorAll(\".field-cell\");\n    var cellIndex = 0;\n    board.forEach(function(row) {\n        row.forEach(function(cell) {\n            var currentCell = cells[cellIndex];\n            currentCell.textContent = cell === 0 ? \"\" : cell;\n            currentCell.className = \"field-cell\";\n            if (cell > 0) currentCell.classList.add(\"field-cell--\".concat(cell));\n            cellIndex++;\n        });\n    });\n    $197cd56b15c33885$var$scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    var winMessage = document.querySelector(\".message-win\");\n    var loseMessage = document.querySelector(\".message-lose\");\n    var startMessage = document.querySelector(\".message-start\");\n    winMessage.classList.add(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    startMessage.classList.add(\"hidden\");\n    if (gameStatus === \"win\") winMessage.classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") loseMessage.classList.remove(\"hidden\");\n    else if (gameStatus === \"idle\") startMessage.classList.remove(\"hidden\");\n}\ndocument.querySelector(\".start\").addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"idle\") $197cd56b15c33885$var$game.restart();\n    else $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$renderBoard();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    var moved = false;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowLeft\":\n            moved = $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    if (moved) {\n        $197cd56b15c33885$var$renderBoard();\n        var button = document.querySelector(\".start\");\n        if (!button.classList.contains(\"restart\")) {\n            button.classList.remove(\"start\");\n            button.classList.add(\"restart\");\n            button.textContent = \"Restart\";\n        }\n    }\n});\n\n})();\n//# sourceMappingURL=index.b2ee81ec.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst field = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction renderBoard() {\n  const board = game.getState();\n  const cells = field.querySelectorAll('.field-cell');\n  let cellIndex = 0;\n\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      const currentCell = cells[cellIndex];\n\n      currentCell.textContent = cell === 0 ? '' : cell;\n      currentCell.className = 'field-cell';\n\n      if (cell > 0) {\n        currentCell.classList.add(`field-cell--${cell}`);\n      }\n      cellIndex++;\n    });\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n  const startMessage = document.querySelector('.message-start');\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.add('hidden');\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  } else if (gameStatus === 'idle') {\n    startMessage.classList.remove('hidden');\n  }\n}\n\ndocument.querySelector('.start').addEventListener('click', () => {\n  if (game.getStatus() !== 'idle') {\n    game.restart();\n  } else {\n    game.start();\n  }\n  renderBoard();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  let moved = false;\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n\n    default:\n      break;\n  }\n\n  if (moved) {\n    renderBoard();\n\n    const button = document.querySelector('.start');\n\n    if (!button.classList.contains('restart')) {\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.textContent = 'Restart';\n    }\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || this.createEmptyBoard();\n    this.status = 'idle';\n    this.score = 0;\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    this.board = this.board.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveRight() {\n    let moved = false;\n\n    this.board = this.board.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i - 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameWin();\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveUp() {\n    let moved = false;\n    const transposedBoard = this.transpose(this.board);\n\n    const updatedBoard = transposedBoard.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(row)) {\n        moved = true;\n      }\n\n      return filteredRow;\n    });\n\n    this.board = this.transpose(updatedBoard);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n  moveDown() {\n    let moved = false;\n\n    let transposed = this.transpose(this.board);\n\n    transposed = transposed.map((row) => {\n      const reversedRow = row.reverse();\n      const filteredRow = reversedRow.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          this.score += filteredRow[i];\n          filteredRow.splice(i + 1, 1);\n          moved = true;\n        }\n      }\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      if (JSON.stringify(filteredRow) !== JSON.stringify(reversedRow)) {\n        moved = true;\n      }\n\n      return filteredRow.reverse();\n    });\n\n    this.board = this.transpose(transposed);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    this.checkGameWin();\n\n    this.checkGameOver();\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = this.createEmptyBoard();\n    this.addRandomTile();\n    this.addRandomTile();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(0))) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.board[i][j];\n\n        if (\n          (i > 0 && current === this.board[i - 1][j]) ||\n          (j > 0 && current === this.board[i][j - 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  checkGameWin() {\n    for (const row of this.board) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","board","createEmptyBoard","status","score","console","log","key","value","_this","moved","map","row","filteredRow","filter","cell","i","length","splice","push","JSON","stringify","addRandomTile","checkGameWin","checkGameOver","unshift","updatedBoard","transposedBoard","transpose","transposed","reversedRow","reverse","start","Array","from","fill","emptyCells","col","randomIndex","Math","floor","random","_emptyCells_randomIndex","row1","col1","some","includes","j","current","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","matrix","_","colIndex","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$field","document","querySelector","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$renderBoard","getState","cells","querySelectorAll","cellIndex","forEach","currentCell","textContent","className","classList","add","concat","getScore","gameStatus","getStatus","winMessage","loseMessage","startMessage","remove","addEventListener","restart","e","preventDefault","moveLeft","moveRight","moveUp","moveDown","button","contains"],"version":3,"file":"index.b2ee81ec.js.map"}